<Project DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
    <Import Project="$(VCTargetsPath)\Microsoft.Cpp.Default.props" />

    <!-- Custom task to download files -->
    <UsingTask TaskName="DownloadFile"
               TaskFactory="CodeTaskFactory"
               AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.v4.0.dll">
        <ParameterGroup>
            <Address ParameterType="System.String" Required="true"/>
            <FileName ParameterType="System.String" Required="true" />
        </ParameterGroup>
        <Task>
            <Reference Include="System" />
            <Code Type="Fragment" Language="cs">
                <![CDATA[
                new System.Net.WebClient().DownloadFile(Address, FileName);
                ]]>
            </Code>
        </Task>
    </UsingTask>

    <!-- Nuget executable -->
    <PropertyGroup>
        <NugetExe>$(MSBuildThisFileDirectory)nuget.exe</NugetExe>
    </PropertyGroup>

    <PropertyGroup Condition="'$(DefaultPlatformToolset)' == 'v120'">
      <IceTargets>icexml;slice2java</IceTargets>
    </PropertyGroup>

    <PropertyGroup Condition="'$(DefaultPlatformToolset)' == 'v140'">
      <IceTargets>c++98\icexml;c++98\slice2java</IceTargets>
    </PropertyGroup>

    <!-- Download nuget.exe if not present -->
    <Target Name="GetNuget" Condition="!Exists('$(NugetExe)')">
        <DownloadFile Address="https://dist.nuget.org/win-x86-commandline/latest/nuget.exe" FileName="$(NugetExe)" />
    </Target>

    <PropertyGroup Condition="'$(Configuration)' == ''">
      <Configuration>Debug</Configuration>
    </PropertyGroup>

    <PropertyGroup Condition="'$(Platform)' == ''">
      <Platform>Win32</Platform>
    </PropertyGroup>

    <!-- Restore Nuget packages -->
    <Target Name="NugetRestore" DependsOnTargets="GetNuget">
        <Exec Command="$(NugetExe) restore $(MSBuildThisFileDirectory)freeze.sln"/>
    </Target>


    <!-- Freeze for C++ builds -->
    <Choose>
        <!--
            If BuildAllConfigurations is set to yes we build all configurations that are
            part of the binary distribution, otherwise we just build the specific platform
            and configuration.
        -->
        <When Condition="'$(BuildAllConfigurations)' == 'yes'">
            <ItemGroup>
              <DistSolution Include="freeze.sln">
                <Properties>Configuration=Debug;Platform=Win32</Properties>
              </DistSolution>
              <DistSolution Include="freeze.sln">
                <Properties>Configuration=Debug;Platform=x64</Properties>
              </DistSolution>
              <DistSolution Include="freeze.sln">
                <Properties>Configuration=Release;Platform=Win32</Properties>
              </DistSolution>
              <DistSolution Include="freeze.sln">
                <Properties>Configuration=Release;Platform=x64</Properties>
              </DistSolution>
            </ItemGroup>
            <ItemGroup>
              <TestSolution Include="freeze.test.sln">
                <Properties>Configuration=Debug;Platform=Win32</Properties>
              </TestSolution>
              <TestSolution Include="freeze.test.sln">
                <Properties>Configuration=Debug;Platform=x64</Properties>
              </TestSolution>
              <TestSolution Include="freeze.test.sln">
                <Properties>Configuration=Release;Platform=Win32</Properties>
              </TestSolution>
              <TestSolution Include="freeze.test.sln">
                <Properties>Configuration=Release;Platform=x64</Properties>
              </TestSolution>
            </ItemGroup>
        </When>
        <Otherwise>
            <ItemGroup>
                <DistSolution Include="freeze.sln">
                    <Properties>Configuration=$(Configuration);Platform=$(Platform)</Properties>
                </DistSolution>

                <TestSolution Include="freeze.test.sln">
                    <Properties>Configuration=$(Configuration);Platform=$(Platform)</Properties>
                </TestSolution>
            </ItemGroup>
        </Otherwise>
    </Choose>

    <Target Name="BuildIce" Condition="'$(UseBinDist)' != 'yes'">
        <MSBuild Projects="..\..\ice\cpp\msbuild\ice.proj"
                 Targets="NugetRestore"
                 BuildInParallel="true"/>
        <MSBuild Projects="..\..\ice\cpp\msbuild\ice.$(DefaultPlatformToolset).sln"
                 Targets="$(IceTargets)"
                 BuildInParallel="true"
                 Properties="%(DistSolution.Properties)"/>
        <MSBuild Projects="..\..\ice\cpp\msbuild\ice.test.sln"
                 Targets="Common\testcommon"
                 BuildInParallel="true"
                 Properties="%(TestSolution.Properties)"/>
    </Target>


    <Target Name="BuildDist" DependsOnTargets="BuildIce;NugetRestore"
            Condition="'$(UseBinDist)' != 'yes'">
        <MSBuild Projects="@(DistSolution)"
                 BuildInParallel="true"
                 Properties="%(Properties)"/>
    </Target>

    <Target Name="CleanDist"
            Condition="'$(UseBinDist)' != 'yes'">
        <MSBuild Projects="@(DistSolution)"
                 BuildInParallel="true"
                 Properties="%(Properties)"
                 Targets="Clean" />
    </Target>

    <!-- Build all the test solution configurations -->
    <Target Name="Build" DependsOnTargets="NugetRestore;BuildDist">
        <MSBuild Projects="@(TestSolution)"
                 BuildInParallel="true"
                 Properties="%(Properties)" />
    </Target>

    <!-- Clean all the test solution configurations -->
    <Target Name="Clean" DependsOnTargets="CleanDist">
        <MSBuild Projects="@(TestSolution)" BuildInParallel="true" Targets="Clean" Properties="%(Properties)" />
    </Target>
</Project>
