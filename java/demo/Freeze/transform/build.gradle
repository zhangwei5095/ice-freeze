// **********************************************************************
//
// Copyright (c) 2003-2016 ZeroC, Inc. All rights reserved.
//
// **********************************************************************

slice {
    compat = true
    java {
        include = ["${projectDir}"]
        srcDir = '.'
    }
    freezej {
        files = [file("ContactData.ice"), file("NewContactData.ice")]
        include = ["${projectDir}"]
        args = "--ice"
        dict {
            Contacts {
                javaType = "Demo.Contacts"
                key = "string"
                value = "Demo::ContactData"
                index = [[ member: 'phoneNumber', case: 'false']]
            }
            NewContacts {
                javaType = "Demo.NewContacts"
                key = "string"
                value = "Demo::NewContactData"
                index = [[ member: 'phoneNumber', case: 'false']]
            }
        }
    }
}

sourceSets {
    main {
        java {
            srcDir '.'
        }
    }
}

dependencies {
    compile localDependency("ice-compat")
    compile localDependency("freeze")
    compile files(dbJar)
    if (!useLocalOnly) {
        runtime "org.apache.tools:bzip2:1.0"
    }
}

// Create a jar for the client & server which includes everything in the demo.
task createJar(type: Jar) {
    version = ""
    baseName = "create"
    from(sourceSets.main.output) {
        include "**"
    }
}

task recreateJar(type: Jar) {
    version = ""
    baseName = "recreate"
    from(sourceSets.main.output) {
        include "**"
    }
}

task readJar(type: Jar) {
    version = ""
    baseName = "read"
    from(sourceSets.main.output) {
        include "**"
    }
}

task readnewJar(type: Jar) {
    version = ""
    baseName = "readnew"
    from(sourceSets.main.output) {
        include "**"
    }
}

createJar {
    manifest {
        attributes("Main-Class": "Create")
        attributes("Class-Path": configurations.compile.resolve().collect { it.toURI() }.join(' '))
    }
}

recreateJar {
    manifest {
        attributes("Main-Class": "Recreate")
        attributes("Class-Path": configurations.compile.resolve().collect { it.toURI() }.join(' '))
    }
}

readJar {
    manifest {
        attributes("Main-Class": "Read")
        attributes("Class-Path": configurations.compile.resolve().collect { it.toURI() }.join(' '))
    }
}

readnewJar {
    manifest {
        attributes("Main-Class": "ReadNew")
        attributes("Class-Path": configurations.compile.resolve().collect { it.toURI() }.join(' '))
    }
}

clean {
    delete fileTree(dir: 'db', excludes:['.gitignore', 'DB_CONFIG'])
    delete fileTree(dir: 'dbNew', excludes:['.gitignore', 'DB_CONFIG'])
}

artifacts {
    archives createJar, recreateJar, readJar, readnewJar;
}
