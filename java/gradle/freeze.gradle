// Ensure iceHome is set prior to loading ice.gradle
ext.freezeHome = iceHome ? iceHome : new File([rootProject.projectDir, ".."].join(File.separator)).getCanonicalPath()
if(!iceHome) {
    iceHome = new File([rootProject.projectDir, "..", "ice"].join(File.separator)).getCanonicalPath()
}

apply from: "$rootProject.projectDir/../ice/java/gradle/ice.gradle"
apply from: "$rootProject.projectDir/gradle/db.gradle"

ext.localIceLibPath = new File([iceHome, "java-compat", "lib"].join(File.separator)).getCanonicalPath()

slice {
    freezeHome = this.freezeHome
    iceHome = this.iceHome
    compat = true
}

ext.localDependency = { artifactId ->
    if(artifactId == "freeze") {
        return project(":${artifactId}")
    } else {
        return "com.zeroc:${artifactId}:${project.version}"
    }
}

ext.demoJar = { name ->
    def taskName = name + "Jar"
    // Create a jar for the client & server which includes everything in the demo.
    def jarTask = tasks.create(name: taskName, type: Jar) {
        version = ""
        baseName = name
        from(sourceSets.main.output) {
            include "**"
        }
    }

    jarTask.manifest {
        attributes("Main-Class": name.capitalize())
        attributes("Class-Path": configurations.runtime.resolve().collect { it.toURI() }.join(' '))
    }


    artifacts {
        archives jarTask
    }
}
