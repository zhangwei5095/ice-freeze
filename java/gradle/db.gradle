//
// Find BerkeleyDB JAR
//

def env = System.getenv()
def isWindows = System.properties['os.name'].toLowerCase().contains('windows')

// Check if we are building against source distribution
def iceCppDir = slice.srcDist ? [slice.iceHome, "cpp"].join(File.separator) : slice.iceHome


def localappdata
def nuget
def dbVersion
def dbPackage

if (isWindows) {
    nuget = "${System.env.LOCALAPPDATA}\\ZeroC\\nuget\\nuget.exe"
    dbVersion = "5.3.28.1"
    dbPackage = "${iceCppDir}\\third-party-packages\\berkeley.db.java7"

    task nugetDirectory() {
        def nugetDir = new File("${System.env.LOCALAPPDATA}\\ZeroC\\nuget")
        if(!nugetDir.exists()) {
            nugetDir.mkdirs()
        }
    }

    task nugetInstall(type:Exec, dependsOn:nugetDirectory) {
      commandLine 'cmd', '/c', 'powershell', '-Command', "(New-Object Net.WebClient).DownloadFile('https://nuget.org/nuget.exe', '${nuget}')"
    }

    task nugetInstallBerkeleyDb(type:Exec) {
      commandLine 'cmd', '/c', nuget, 'install', 'berkeley.db.java7', '-OutputDirectory', "${iceCppDir}/third-party-packages/", '-ExcludeVersion'
    }

}

if(dbHome) {
    ext.dbJar = "${dbHome}/db.jar"
} else if(env['DB_HOME']) {
    def dbHomeDir = env['DB_HOME']
    ext.dbJar = "${dbHomeDir}/lib/db.jar"
} else {
    def subdirs
    if (isWindows) {
        if(slice.srcDist){
            if(!new File(nuget).exists()) {
                nugetInstall.execute()
            }
            if(!new File("${dbPackage}/berkeley.db.java7.nupkg").exists()) {
                nugetInstallBerkeleyDb.execute()
            }
            subdirs = [ "${dbPackage}/build/native/lib/" ]
        } else {
            subdirs = [ "${slice.iceHome}/lib/" ]
        }
    } else {
        subdirs = [
            "/usr/local/opt/ice/libexec/lib/",
            "/usr/local/opt/berkeley-db53/lib/",
            "/usr/local/lib/",
            "/usr/share/java/",
            "/opt/Ice-${project.version}/lib/",
            "/opt/db/lib/",
            "/usr/lib/"
        ]
    }

    def candidates = ["db-5.3.28.jar", "db-5.3.21.jar", "db.jar"].collect {
        def dbJarName = it
        subdirs.collect {
            it.concat(dbJarName)
        }
    }.flatten()

    ext.dbJar = candidates.find {
        new File(it).exists()
    }
}


if(!ext.dbJar || !new File(ext.dbJar).exists()) {
    throw new GradleException("Unable to locate the required third party BerkeleyDB jar file `db.jar'.")
}
